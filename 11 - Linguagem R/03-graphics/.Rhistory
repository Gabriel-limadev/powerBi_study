2+2
setwd("/home/gabriel-liamdev/Documents/GitHub/powerBi_study/11 - Linguagem R")
getwd()
summary(vendas$Custo)
# Loading the dataset
vendas <- read.csv("Vendas.csv")
# Loading the dataset
vendas = read.csv("Vendas.csv")
# Loading the dataset
vendas = read.csv("Vendas.csv", to = "ASCII"
)
# Loading the dataset
vendas = read.csv("Vendas.csv", check.names = F)
# Dataset Resume
View(vendas)
str(vendas)
# Loading the dataset
vendas = read.csv("Vendas.csv", encoding="UTF-8")
# Loading the dataset
vendas = read.csv("Vendas.csv", check.names = F, encoding="UTF-8")
# Dataset Resume
View(vendas)
str(vendas)
summary(vendas$Valor)
summary(vendas$Custo)
# Loading the dataset
vendas = read.csv("Vendas.csv", check.names = F, encoding = "UTF-8")
str(vendas)
# Loading the dataset
vendas = read.csv("Vendas.csv", check.names = F, fileEncoding = "UTF-8")
# Loading the dataset
vendas = read.csv("Vendas.csv", check.names = F, fileEncoding = "windows-1252")
str(vendas)
# Loading the dataset
vendas = read.csv("Vendas.csv", fileEncoding = "windows-1252")
# Dataset Resume
View(vendas)
str(vendas)
View(vendas)
str(vendas)
summary(vendas$Valor)
summary(vendas$Custo)
summary(vendas$Custo)
# Average
?mean
mean(vendas$Valor)
mean(vendas$Custo)
# Weighted average
?weighted.mean
weighted.mean(vendas$Valor, w = vendas$Custo)
# Median
median(vendas$Valor)
median(vendas$Custo)
# Mode
mode = function(v){
unique_value = unique(v)
unique_value[which.max(tabulate(match(v, unique_value)))]
}
# getting mode
result = mode(vendas$Valor)
print(result)
summary(vendas$Custo)
# Average
?mean
mean(vendas$Valor)
mean(vendas$Custo)
# Weighted average
?weighted.mean
weighted.mean(vendas$Valor, w = vendas$Custo)
# Median
median(vendas$Valor)
median(vendas$Custo)
# Mode
mode = function(v){
unique_value = unique(v)
unique_value[which.max(tabulate(match(v, unique_value)))]
}
# getting mode
valor_mode = mode(vendas$Valor)
custo_mode = mode(vendas$Custo)
print(valor_mode, custo_mode)
print(valor_mode, custo_mode)
print(valor_mode + custo_mode)
print(valor_mode, custo_mode)
print(valor_mode, custo_mode)
print(valor_mode)
print(custo_mode)
print(valor_mode)
print(custo_mode)
# ---------------------- Creating Graphics --------------------------
install.packages("ggplot2")
libraty(ggplot2)
print(valor_mode)
print(custo_mode)
# ---------------------- Creating Graphics --------------------------
install.packages("ggplot2")
library(ggplot2)
ggplot(vendas) +
stat_summary(aes(x = Estado,
y = Valor),
fun = mean,
geom = "bar",
fill = "lightgreen",
col = "grey50") +
labs(title = "Média de Valor por Estado")
# standard deviation
sd(vendas$Valor)
# standard deviation
sd(vendas$Valor)
# standard deviation
sd(vendas$Valor)
# variance
var(vendas$Valor)
c('Valor', 'Custo')]
c('Valor', 'Custo')]
# Defining the folder
setwd("/home/gabriel-liamdev/Documents/GitHub/powerBi_study/11 - Linguagem R")
getwd()
# Loading the dataset
vendas = read.csv("Vendas.csv", fileEncoding = "windows-1252")
# Data Resume
head(vendas)
tail(vendas)
View(vendas)
# measures of central tendency
summary(vendas$Valor)
summary(vendas[c('Valor', 'Custo')])
# Exploring numeric variables
mean(vendas$Valor)
median(vendas$Valor)
quantile(vendas$Valor)
quantile(vendas$Valor, probs = c(0.01, 0.99))
quantile(vendas$Valor, seq(from = 0, to = 1, by = 0.20))
IQR(vendas$Valor)
range(vendas$Valor)
summary(vendas$Valor)
diff(range(vendas$Valor)
diff(range(vendas$Valor))
diff(range(vendas$Valor))
setwd("/home/gabriel-liamdev/Documents/GitHub/powerBi_study/11 - Linguagem R/exercises")
setwd("/home/gabriel-liamdev/Documents/GitHub/powerBi_study/11 - Linguagem R/exercises")
getwd()
grades = read.csv("Notas.csv", fileEncoding = "windows-1252")
View(grades)
# 1) Presents a summary of data types and dataset statistics
summary(grades)
# 1) Presents a summary of data types and dataset statistics
str(grades)
# 2) What is the average in each class?
mean(grades)
# 2) What is the average in each class?
mean(grades$TurmaA)
mean(grades$TurmaB)
# 3) What class had the greatest variability in grades?
sd(grades$TurmaA)
sd(grades$TurmaB)
# 2) What is the average in each class?
mean(grades$TurmaA)
# 4) Calculate the coefficient of variation of the 2 class:
var(grades$TurmaA)
var(grades$TurmaB)
# getting mode
turmaA_mode = mode(grades$TurmaA)
turmaB_mode = mode(grades$TurmaB)
print(turmaA_mode)
print(turmaB_mode)
# getting mode
turmaA_mode = mode(grades$TurmaA)
turmaB_mode = mode(grades$TurmaB)
print(turmaA_mode)
print(turmaB_mode)
# 2) What is the average in each class?
mean(grades$TurmaA)
mean(grades$TurmaB)
# 4) Calculate the coefficient of variation of the 2 class:
average_turmaA = mean(grades$TurmaA)
# 4) Calculate the coefficient of variation of the 2 class:
average_turmaA = mean(grades$TurmaA)
average_turmaB = mean(grades$TurmaB)
sd_ta = sd(grades$TurmaA)
sd_tb = sd(grades$TurmaB)
cvA = sd_ta / average_turmaA * 100
cvB = sd_tb / average_turmaB * 100
print(cvA)
print(cvB)
# getting mode
mode(grades$TurmaA)
mode(grades$TurmaB)
print(int(turmaA_mode))
setwd("/home/gabriel-liamdev/Documents/GitHub/powerBi_study/11 - Linguagem R/frequency")
getwd()
data = read.csv("Usuarios.csv",
dec = ".",
sep = ",",
h = T,
fileEncoding = "windows-1252")
View(data)
names(data)
str(data)
summary(data$grau_instrucao)
mean(data$salario)
mena(data$grau_instrucao)
mean(data$grau_instrucao)
# table of absolute frequency
freq = table(data$grau_instrucao)
View(freq)
# table of relative frequency
freq_rel = props.table(freq_rel)
# table of relative frequency
freq_rel = prop.table(freq_rel)
# table of relative frequency
freq_rel = prop.table(freq)
View(freq_rel)
# table of relative frequency
freq_rel = prop.table(freq) * 100
View(freq_rel)
# add total lines
freq = c(freq, sum(freq))
names(freq[4]) = "Total"
View(freq)
names(freq)[4] = "Total"
View(freq)
# Table finished
freq_rel = c(freq_rel, sum(freq_rel))
p_freq_rel = c(p_freq_rel, sum(p_freq_rel))
# table of relative frequency
freq_rel = prop.table(freq)
p_freq_rel = prop.table(freq) * 100
View(freq_rel)
# add total lines
freq = c(freq, sum(freq))
names(freq)[4] = "Total"
# Table finished
freq_rel = c(freq_rel, sum(freq_rel))
p_freq_rel = c(p_freq_rel, sum(p_freq_rel))
final_table = cbind(freq,
freq_rel = round(freq_rel, digits = 2),
p_freq_rel  = round(p_freq_rel, digits = 2))
View(final_table)
View(freq)
setwd("/home/gabriel-liamdev/Documents/GitHub/powerBi_study/11 - Linguagem R/frequency")
getwd()
data = read.table("Usuarios.csv",
dec = ".",
sep = ",",
h = T,
fileEncoding = "windows-1252")
# table of absolute frequency
freq = table(data$grau_instrucao)
View(freq)
# table of relative frequency
freq_rel = prop.table(freq)
p_freq_rel = prop.table(freq) * 100
View(freq_rel)
# add total lines
freq = c(freq, sum(freq))
names(freq)[4] = "Total"
View(freq)
# Table finished
freq_rel = c(freq_rel, sum(freq_rel))
p_freq_rel = c(p_freq_rel, sum(p_freq_rel))
final_table = cbind(freq,
freq_rel = round(freq_rel, digits = 2),
p_freq_rel  = round(p_freq_rel, digits = 2))
View(final_table)
setwd('/home/gabriel-liamdev/Documents/GitHub/powerBi_study/11 - Linguagem R/03-graphics')
getwd()
barplot(result_total_vector)
setwd('/home/gabriel-liamdev/Documents/GitHub/powerBi_study/11 - Linguagem R/03-graphics')
getwd()
# data
result_total_vector = c(3, 12, 5, 18, 45)
names(result_total_vector) = c('A', 'B', 'C', 'D', 'E')
result_total_vector
# Barplot
?barplot
barplot(result_total_vector)
barplot(result_total_vector)
barplot(result_total_vector)
barplot(result_total_vector, col = c(1, 2, 3, 4, 5))
# Salving the graphic in disk
png("barplot.png", width = 480, height = 480 )
barplot(result_total_vector,
col = rgb(0.5,0.1,0.6,0.6),
xlab = "Categorias",
ylab = "Valores",
main = "Barplot em R",
ylim = c(0,60) )
dev.off()
# Ggplot2
library(ggplot2)
View(mtcars)
# Barplot
ggplot(mtcars, aes(x = as.factor(cyl) )) +
geom_bar()
ggplot(mtcars, aes(x = as.factor(cyl), fill = as.factor(cyl) )) +
geom_bar( ) +
scale_fill_manual(values = c("red", "green", "blue"))
# Criando dados dummy (fictícios)
dados = data.frame(group = c("A ","B ","C ","D ") , value = c(33,62,56,67))
View(dados)
# Barplot
ggplot(dados, aes(x = group, y = value ,fill = group )) +
geom_bar(width = 0.85, stat = "identity")
fatias <- c(4, 12, 14, 16, 8)
# Barplot
ggplot(dados, aes(x = group, y = value ,fill = group )) +
geom_bar(width = 0.85, stat = "identity")
fatias <- c(4, 12, 14, 16, 8)
paises <- c("Brasil", "Estados Unidos", "Alemanha", "Reino Unido", "Espanha")
pie(fatias, labels = paises, main = "Leitura de Livros Por Pessoa/Ano")
# Pie Chart 3D
install.packages("plotrix")
library(plotrix)
fatias <- c(4, 12, 14, 16, 8)
paises <- c("Brasil", "Estados Unidos", "Alemanha", "Reino Unido", "Espanha")
pie3D(fatias, labels = paises, explode = 0.1, main = "Leitura de Livros Por Pessoa/Ano")
# Data
cars <- c(1, 3, 6, 4, 9)
paths <- c(2, 5, 4, 5, 12)
# Plot
plot(cars, type = "o", col = "blue", ylim = c(0,12))
lines(paths, type = "o", pch = 22, lty = 2, col = "red")
title(main = "Produção de Veículos", col.main = "red", font.main = 4)
# Plot
ggplot(mpg, aes(x = reorder(class, hwy), y = hwy, fill = class)) +
geom_boxplot() +
xlab("class") +
theme(legend.position = "none")
data = data.frame(cond = rep(c("condition_1", "condition_2"), each=10),
my_x = 1:100 + rnorm(100,sd=9), my_y = 1:100 + rnorm(100,sd=16))
ggplot(data, aes(x=my_x, y=my_y)) +
geom_point(shape=1)
# Add regression line
ggplot(data, aes(x=my_x, y=my_y)) +
geom_point(shape=1) +
geom_smooth(method = lm , color="red", se=FALSE)
# add smooth
ggplot(data, aes(x=my_x, y=my_y)) +
geom_point(shape=1) +
geom_smooth(method=lm , color="red", se=TRUE)
install.packages("treemap")
# Instala os pacotes
install.packages("dplyr")
install.packages("data.table")
install.packages("ggplot2")
install.packages("ggplot2")
# Carrega os pacotes
library(dplyr)
library(data.table)
library(ggplot2)
# Carrega os dados
# Fonte de dados: https://archive.ics.uci.edu/ml/datasets/iris
dados_iris <- iris
View(dados_iris)
# Carrega os pacotes
library(dplyr)
library(data.table)
library(ggplot2)
# Carrega os dados
# Fonte de dados: https://archive.ics.uci.edu/ml/datasets/iris
dados_iris <- iris
View(dados_iris)
_
medias_iris <- summarize(group_by(dados_iris, Species),
media_sepal_length = mean(Sepal.Length),
media_sepal_width = mean(Sepal.Width),
media_petal_length = mean(Petal.Length),
media_petal_width = mean(Petal.Width))
View(medias_iris)
# Tarefa 2 - Extrair o valor inteiro de uma das colunas decimais.
library(data.table)
dados_iris_id <- data.table(dados_iris)
View(dados_iris_id)
dados_iris_id$Sepal.Length <- as.integer(dados_iris_id$Sepal.Length)
View(dados_iris_id)
View(dados_iris_id)
ggplot(data = dados_iris, aes(x = Petal.Width, y = Petal.Length)) +
geom_point(aes(color = Species), size = 3) +
ggtitle("Largura e Comprimento das Pétalas") +
labs(x = "Largura da Pétala",
y = "Comprimento da Pétala") +
theme_bw() +
theme(title = element_text(size = 15, color = "turquoise4"))
# Cores disponíveis na Linguagem R
colors()
